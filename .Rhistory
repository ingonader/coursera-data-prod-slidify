## preprocessing
## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## convert to lower case:
mail.corp <- tm_map(mail.corp.orig, tolower)
inspect(mail.corp[global.mail.wch])
## remove stopwords:
mail.corp <- tm_map(mail.corp, removeWords, stopwords("english"))
inspect(mail.corp[global.mail.wch])
## can use any stopword list, also lists that are individually created
## Supported languages: danish, dutch, english, finnish, french, german,
##   hungarian, italian, norwegian, portuguese, russian, spanish, and swedish
#stopwords("italian")
## remove numbers:
mail.corp <- tm_map(mail.corp, removeNumbers)
inspect(mail.corp[global.mail.wch])
## replace words:
mail.corp <- tm_map(mail.corp, gsub, pattern="(img[[:space:][:punct:]])|(image[[:space:][:punct:]])|(Image[[:space:][:punct:]])|(images[[:space:][:punct:]])|(Images[[:space:][:punct:]])", replacement=" ")
mail.corp <- tm_map(mail.corp, gsub, pattern="http://[[:alpha:]/.]*", replacement=" ") ## removes http adresses
mail.corp <- tm_map(mail.corp, gsub, pattern="[[:space:]]will[[:space:]]", replacement=" ") ## removes the word "will"
inspect(mail.corp[global.mail.wch])
## removing punctuation:
mail.corp <- tm_map(mail.corp, removePunctuation, preserve_intra_word_dashes = TRUE)
inspect(mail.corp[global.mail.wch])
## stemming:
mail.corp <- tm_map(mail.corp, stemDocument, language="english")
inspect(mail.corp[global.mail.wch])
#getStemLanguages()
## stripping whitespaces:
mail.corp <- tm_map(mail.corp, stripWhitespace)
inspect(mail.corp[global.mail.wch])
## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## creating document-term-matrix
## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
mail.dtm.full <- DocumentTermMatrix(mail.corp,  ## control argument can be used
control = list(                         ## to do stemming and everything
minWordLength=3))
mail.dtm.full
as.matrix(mail.dtm.full[1:6])[, 1:20]
## remove sparse terms:
mail.dtm <- removeSparseTerms(mail.dtm.full, sparse=0.97)
## omit documents that don't contain any relevant terms:
mail.dtm <- mail.dtm[rowSums(as.matrix(mail.dtm)) > 0,]     ## exclude documents that don't contain any terms
mail.dtm
as.matrix(mail.dtm[1:6])[, 1:20]
lda.final.score <- LDA(mail.dtm, model=lda.final, control=list(estimate.beta=FALSE))
head(posterior(lda.final.score)$topics)
mail.topics <- posterior(lda.final.score)$topics
dim(mail.topics)
mail.topics.max <- apply(mail.topics, 1, function(i) which(i==max(i))[1])
head(mail.topics.max)
mail.topics.maxval <- apply(mail.topics, 1, max)
head(mail.topics.maxval)
mail.topics.export <- data.frame("email_id"=as.character(meta(mail.corp.orig)$email_id)[as.numeric(dimnames(mail.topics)[[1]])])
mail.topics.export <- data.frame(mail.topics.export,
mail.topics,
topic.names[mail.topics.max],
mail.topics.maxval
)
topic.names
names(mail.topics.export) <- c("email_id", topic.names, "maxtopic", "maxtopicval")
head(mail.topics.export)
write.table(dat.in,
file=paste0(path.r, "input-data-email.tsv"),
sep="\t", na="NA", row.names=FALSE, col.names=FALSE)
outputs.types <- c("varchar", rep("numeric(7,4)", length(topic.names)), "varchar", "numeric(7,4)")
#cat(paste0("'", names(mail.topics.export), " ", outputs.types, "', "), "\n", sep="")
outputs.types <- c("varchar", rep("numeric(7,4)", length(topic.names)), "varchar", "numeric(7,4)")
outputs.types
names(mail.topics.export)
#cat(paste0("'", names(mail.topics.export), " varchar', "), sep="")
cat(paste0("'", names(mail.topics.export), " ", outputs.types, "', "), "\n", sep="")
dat.export <- data.frame(
"id"=1:10,
"datacol1"=rep("text", 10),
"datacol2"=rnorm(10),
"datacol3"=rnorm(10),
"datacol4"=rnorm(10))
head(dat.export)
library(RODBC)
install.packages('RODBC')
library(RODBC)
?odbcconnect
?odbcConnect
aster.dsn <- 'Aster local vmware'
aster.uid <- 'beehive'
aster.pwd <- 'beehive'
connect.aster <- odbcConnect(dsn=aster.dsn,uid=aster.uid,pwd=aster.pwd)
?sqlQuery
query.txt <- 'select * from public.twm_customer_analysis
where cust_id in
(select cust_id from public.cust_id_sample);'
data_train <- sqlQuery(connect.aster,query=query.txt)
data_train
query2.txt <- 'select * from public.twm_customer_analysis
where cust_id not in
(select cust_id from public.cust_id_sample);'
data_test <- sqlQuery(connect.aster,query=query2.txt)
summary(data_train)
close(connect.aster)
str(data_train)
names(data_train)
names(data.train) <- tolower(names(data.train))
names(data.test) <- tolower(names(data.test))
names(data_train) <- tolower(names(data_train))
names(data_test) <- tolower(names(data_test))
levels(data_train$gender)
data_train$levels <- trim(levels(data_train$gender))
library(gdata)
install.packages('gdata')
library(gdata)
data_train$levels <- trim(levels(data_train$gender))
levels(data_train$gender) <- trim(levels(data_train$gender))
data_train$levels
leves(data_train$state_code) <- trim(levels(data_train$state_code))
levels(data_train$state_code) <- trim(levels(data_train$state_code))
data_train$marital_status <- factor(data_train$marital_status)
levels(data_train$marital_status) <- list(
"single"=1, "married"=2, "separated"=3, "other"=4)
data_train$marital_status
data_train$female <- factor(data_train$female)
data_train$single <- factor(data_train$single)
data_train$married <- factor(data_train$married)
data_train$separated <- factor(data_train$separated)
data_train$ccacct <- factor(data_train$ccacct)
data_train$ckacct <- factor(data_train$ckacct)
data_train$svacct <- factor(data_train$svacct)
str(data_train)
cust.model <- glm(married~income+age+year_with_bank+nbr_children+gender+marital_status
+avg_cc_bal+avg_ck_bal+avg_svg_bal,
data=data_train, family=binomial)
cust.model <- glm(married~income+age+years_with_bank+nbr_children+gender+marital_status
+avg_cc_bal+avg_ck_bal+avg_svg_bal,
data=data_train, family=binomial)
cust.model <- glm(married~income+age+years_with_bank+nbr_children+gender+marital_status
+avg_cc_bal+avg_ck_bal+avg_sv_bal,
data=data_train, family=binomial)
cust.model <- glm(married~income+age+years_with_bank+nbr_children+gender+marital_status
+ccacct+ckacct+ssvacct,
data=data_train, family=binomial)
+ccacct+ckacct+svacct,
cust.model <- glm(married~income+age+years_with_bank+nbr_children+gender+marital_status
+ccacct+ckacct+svacct,
data=data_train, family=binomial)
cust.model <- glm(ccacct~income+age+years_with_bank+nbr_children+gender+marital_status
+ckacct+svacct,
data=data_train, family=binomial)
summary(cust.model)
?step
cust.model.ini <- glm (ccacct ~ 1, data=data_train, family=binomial)
cust.model.ini <- glm (ccacct ~ 1, data=data_train, family=binomial)
cust.model.step <- step(cust.model.ini, scope=~income+age+years_with_bank+nbr_children+gender+marital_status
+ckacct+svacct, directopn='both')
install.packages('MASS')
library(MASS)
cust.model.ini <- glm (ccacct ~ 1, data=data_train, family=binomial)
cust.model.step <- step(cust.model.ini, scope=~ income + age + years_with_bank + nbr_children + gender +
marital_status + ckacct + svacct, directopn='both')
scopedef <- list(
lower = ~1,
upper = ~ income + age + years_with_bank + nbr_children + gender +
marital_status + ckacct + svacct)
nullmodel <- glm(ccacct ~ 1, data = dat.train,
family=binomial(link="logit"))
nullmodel <- glm(ccacct ~ 1, data = data_train,
family=binomial(link="logit"))
fit1 <- stepAIC(nullmodel, scope=scopedef, direction="both", trace=TRUE)
summary(cust.model.step)
summary(fit1)
library(pscl)
install.packages(c('pscl','fmsb'))
library(pscl)
library(fmsb)
pR2(fit1)            ## pseudo R^2
NagelkerkeR2(fit0)   ## Nagelkerke R^2
NagelkerkeR2(cust.model)   ## Nagelkerke R^2
NagelkerkeR2(cust.model.step)   ## Nagelkerke R^2
?paste0
path.R
path.r
path.r='C:\\data-sync\\teradata-work\\teradata-project\\training-knowledge-exchange\\r-on-aster-pascal-hess\\r-scripts'
path.r='C:\\data-sync\\teradata-work\\teradata-project\\training-knowledge-exchange\\r-on-aster-pascal-hess\\r-scripts\\'
save(fit1, file=paste0(path.r, "model-file-glm-fit1_test.Rdata"))
attr(fit1$terms, "variables")
attr(fit1$terms, "term.labels")
summary(fit1)
?predict
library(gdata)
output.type <- c("int", "numeric(7,4)")
output.coldef <- paste0("'", names(dat.export.all), " ", output.type, "'")
path.r
dat_test
data_test
write.table(data_test,
file=paste0(path.r, "input-data.tsv"),
sep="\t", na="NA", row.names=FALSE, col.names=FALSE)
fit1
fit1
path.r
write.table(data_test[c("cust_id", "marital_status", "ckacct", "gender")],
file=paste0(path.r, "input-data.tsv"),
sep="\t", na="NA", row.names=FALSE, col.names=FALSE)
data_train
levels(data_train$gender)
write.table(data_test[c("cust_id", "marital_status", "ckacct", "gender")],
file=paste0(path.r, "input-data.tsv"),
sep="\t", na="NA", row.names=FALSE, col.names=FALSE, quote=FALSE)
write.table(data_test[c("cust_id", "marital_status", "ckacct", "gender")],
file=paste0(path.r, "input-data.tsv"),
sep="\t", na="NA", row.names=FALSE, col.names=FALSE, quote=FALSE)
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
dat.export <- data.frame(
"id"=1:10,
"datacol1"=rep("text", 10),
"datacol2"=rnorm(10),
"datacol3"=rnorm(10),
"datacol4"=rnorm(10))
dat.export <- data.frame(
"id"=1:10,
"datacol1"=rep("text", 10),
"datacol2"=rnorm(10),
"datacol3"=rnorm(10),
"datacol4"=rnorm(10))
dat.export <- data.frame(
"id"=1:10,
"datacol1"=rep("text", 10),
"datacol2"=rnorm(10),
"datacol3"=rnorm(10),
"datacol4"=rnorm(10))
head(dat.export)
output.type <- c("int", "varchar(255)", rep("numeric(7,4)", 3))
output.type <- c("int", "varchar(255)", rep("numeric(7,4)", 3))
output.type
names(dat.export)
names(dat.export)
output.coldef <- paste0("'", names(dat.export), " ", output.type, "'")
output.coldef
output.coldefline <- paste0(output.coldef, collapse=", ")
output.coldefline
output.clause <- paste0('outputs (', output.coldefline, ')', collapse="")
cat(output.clause, "\n")
cat(paste0("col ", seq_along(names(dat.export)), ": ", names(dat.export), " (", output.type, ")\n"), sep="")
library(RODBC)
library(gdata)   ## trim()
library(MASS)    ## stepAIC()
library(car)     ## vif()
library(MASS)    ## stepAIC()
library(RODBC)
library(gdata)   ## trim()
aster.dsn <- "Aster local vmware"
aster.uid <- "beehive"
aster.pwd <- "beehive"
channel.aster <- odbcConnect(dsn=aster.dsn, uid=aster.uid, pwd=aster.pwd)
sql.txt <- "select * from public.twm_customer_analysis
where cust_id in
(select cust_id from public.cust_id_sample);"
dat.train <- sqlQuery(channel.aster, sql.txt)
dat.train
sql.txt <- "select * from public.twm_customer_analysis
where cust_id not in
(select cust_id from public.cust_id_sample);"
dat.test <- sqlQuery(channel.aster, sql.txt)
dat.test
close(channel.aster)
## data preparation:
## ''''''''''''''''''''''''''''''''''''
## convert names to lower case:
names(dat.train) <- tolower(names(dat.train))
names(dat.test) <- tolower(names(dat.test))
levels(dat.train$gender)
levels(dat.train$gender) <- trim(levels(dat.train$gender))
levels(dat.train$state_code)
levels(dat.train$state_code) <- trim(levels(dat.train$state_code))
dat.train$marital_status <- factor(dat.train$marital_status)
levels(dat.train$marital_status) <- list(
"single"=1, "married"=2, "separated"=3, "other"=4)
dat.train$female <- factor(dat.train$female)
dat.train$single <- factor(dat.train$single)
dat.train$married <- factor(dat.train$married)
dat.train$separated <- factor(dat.train$separated)
dat.train$ccacct <- factor(dat.train$ccacct)
dat.train$ckacct <- factor(dat.train$ckacct)
dat.train$svacct <- factor(dat.train$svacct)
levels(dat.test$gender) <- trim(levels(dat.test$gender))
levels(dat.test$state_code) <- trim(levels(dat.test$state_code))
dat.test$marital_status <- factor(dat.test$marital_status)
levels(dat.test$marital_status) <- list(
"single"=1, "married"=2, "separated"=3, "other"=4)
dat.test$female <- factor(dat.test$female)
dat.test$single <- factor(dat.test$single)
dat.test$married <- factor(dat.test$married)
dat.test$separated <- factor(dat.test$separated)
dat.test$ccacct <- factor(dat.test$ccacct)
dat.test$ckacct <- factor(dat.test$ckacct)
dat.test$svacct <- factor(dat.test$svacct)
fit0 <- glm(ccacct ~ income + age + years_with_bank + nbr_children + gender +
marital_status + ckacct + svacct,
data = dat.train,
family=binomial(link="logit"))
summary(fit0)
scopedef <- list(
lower = ~1,
upper = ~ income + age + years_with_bank + nbr_children + gender +
marital_status + ckacct + svacct)
nullmodel <- glm(ccacct ~ 1, data = dat.train,
family=binomial(link="logit"))
fit1 <- stepAIC(nullmodel, scope=scopedef, direction="both", trace=TRUE)
summary(fit1)
library(fmsb)
NagelkerkeR2(fit.glm0)   ## Nagelkerke R^2
NagelkerkeR2(fit0)   ## Nagelkerke R^2
vif(fit1)
dat.this <- dat.train
confmat <- table(predict(fit1, newdata=dat.this, type="response") > 0.5,
dat.this$ccacct)
confmat
confmat[1,1] / (confmat[1,1]+confmat[2,1])
confmat[2,2] / (confmat[2,2]+confmat[1,2])
confmat[2,2] / (confmat[2,2]+confmat[2,1])
dat.gains <- na.omit(data.frame("ccacct"=dat.this$ccacct, "fitted_value"=predict(fit.glm1, newdata=dat.this, type="response")))
dat.gains <- dat.gains[order(-dat.gains$fitted_value),]
plot((seq_along(dat.gains$fitted_value)/length(dat.gains$fitted_value)),cumsum(as.numeric(dat.gains$ccacct))/sum(as.numeric(dat.gains$ccacct)), type="l")
abline(a=0, b=1)
dat.gains <- na.omit(data.frame("ccacct"=dat.this$ccacct, "fitted_value"=predict(fit1, newdata=dat.this, type="response")))
dat.gains <- dat.gains[order(-dat.gains$fitted_value),]
plot((seq_along(dat.gains$fitted_value)/length(dat.gains$fitted_value)),cumsum(as.numeric(dat.gains$ccacct))/sum(as.numeric(dat.gains$ccacct)), type="l")
abline(a=0, b=1)
dat.this <- dat.test
confmat <- table(predict(fit1, newdata=dat.this, type="response") > 0.5,
dat.this$ccacct)
confmat
confmat[1,1] / (confmat[1,1]+confmat[2,1])
confmat[2,2] / (confmat[2,2]+confmat[1,2])
confmat[2,2] / (confmat[2,2]+confmat[2,1])
dat.gains <- na.omit(data.frame("ccacct"=dat.this$ccacct, "fitted_value"=predict(fit1, newdata=dat.this, type="response")))
dat.gains <- dat.gains[order(-dat.gains$fitted_value),]
plot((seq_along(dat.gains$fitted_value)/length(dat.gains$fitted_value)),cumsum(as.numeric(dat.gains$ccacct))/sum(as.numeric(dat.gains$ccacct)), type="l")
abline(a=0, b=1)
save(fit1, file=paste0(path.r, "model-file-glm-fit1.Rdata"))
path.raw <- "C:/data-sync/teradata-work/teradata-project/training-knowledge-exchange/r-on-aster-hungary/"
path.r <- paste0(path.raw, "r-scripts/")
path.dat <- paste0(path.raw, "data/")
save(fit1, file=paste0(path.r, "model-file-glm-fit1.Rdata"))
str(fit1)
fit1$terms
attr(fit1$terms, "variables")
attr(fit1$terms, "term.labels")
dat.in.names <- c("cust_id", "marital_status", "ckacct", "income")
dat.in <- dat.test[dat.in.names] ## new data that will be read from stdin
dat.in
head(dat.in)
pred.prob <- predict(fit1, newdata=dat.in, type="response")
pred.prob
dat.export.all <- data.frame(
"cust_id"=dat.in$cust_id,
"fitted_value"=pred.prob)
head(dat.export.all)
cat(paste0("## col ", seq_along(names(dat.in)), ": ",names(dat.in), "\n"), "\n", sep="")
aster.dsn <- "Aster local vmware"
aster.uid <- "beehive"
aster.pwd <- "beehive"
channel.aster <- odbcConnect(dsn=aster.dsn, uid=aster.uid, pwd=aster.pwd)
sql.txt <- "select cust_id, marital_status, ckacct, income from public.twm_customer_analysis;"
dat.in<- sqlQuery(channel.aster, sql.txt)
close(channel.aster)
head(dat.in)
write.table(dat.in,
file=paste0(path.r, "input-data.tsv"),
sep="\t", na="NA", row.names=FALSE, col.names=FALSE, quote=FALSE)
names(dat.in) <- c("cust_id", "marital_status", "ckacct", "income")
library(gdata)
pred.prob <- predict(fit1, newdata=dat.in, type="response")
## prepare data for modelling:
dat.in$marital_status <- factor(dat.in$marital_status)
levels(dat.in$marital_status) <- list(
"single"=1, "married"=2, "separated"=3, "other"=4)
dat.in$ckacct <- factor(dat.in$ckacct)
pred.prob <- predict(fit1, newdata=dat.in, type="response")
pred.prob
dat.export.all <- data.frame(
"cust_id"=dat.in$cust_id,
"fitted_value"=pred.prob)
head(dat.export.all)
output.type <- c("int", "numeric(7,4)")
output.coldef <- paste0("'", names(dat.export.all), " ", output.type, "'")
output.coldefline <- paste0(output.coldef, collapse=", ")
output.clause <- paste0('outputs (', output.coldefline, ')', collapse="")
cat(output.clause, "\n")
cat(paste0("col ", seq_along(names(dat.export.all)), ": ", names(dat.export.all), " (", output.type, ")\n"), sep="")
names(dat.in)
names(dat.in)
library(cluster)
data(ruspini)
rusp.kmeans <- kmeans(ruspini, 4)
rusp.kmeans
plot(ruspini, col=rusp.kmeans$cluster, pch=as.character(rusp.kmeans$cluster), cex=0.7)
rusp.kmeans <- kmeans(ruspini, 4)
rusp.kmeans
plot(ruspini, col=rusp.kmeans$cluster, pch=as.character(rusp.kmeans$cluster), cex=0.7)
rusp.kmeans <- kmeans(ruspini, 4)
rusp.kmeans
plot(ruspini, col=rusp.kmeans$cluster, pch=as.character(rusp.kmeans$cluster), cex=0.7)
rusp.kmeans <- kmeans(ruspini, 4)
rusp.kmeans
plot(ruspini, col=rusp.kmeans$cluster, pch=as.character(rusp.kmeans$cluster), cex=0.7)
strdat <- c("first", "second", "third", "fourth")
strdat
sub(pattern="ir", replacement="-IR-", x=strdat, ignore.case=FALSE)
x <- try(
sub(pattern="ir", replacement="-IR-", x=strdat, ignore.case=FALSE),
silent=TRUE)
x
x <- try(
sub(pattern="ir", replacement="-IR-", x=strdat_nonexist, ignore.case=FALSE),
silent=FALSE)
x
x <- try(
sub(pattern="ir", replacement="-IR-", x=strdat_nonexist, ignore.case=FALSE),
silent=TRUE)
x
class(x)
rm(res)
res <- tryCatch({
## some code in a block
a <- 42
res <- (1:3)+(1:4)   ## will produce a warning
return(res)
},
warning = function(war) {
## warning handler picks up where error was generated
print(a)                       ## a is available here
return(paste("MY_WARNING:  ", war))
},
error = function(err) {
## error handler picks up where error was generated
return(paste("MY_ERROR:  ", err))
},
finally = {
## block of code that is always done.
print("finally do something (cleanup).")
})
res
z <- rnorm(10^8)
ls()
ll()
ll()[order(ll()$KB),]
x <- rnorm(10^8)
rm(z)
rm(x)
gc()             ## garbage collection
install.packages("shiny")
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text')
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text')
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text')
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text'),
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text'),
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
library(devtools)
install_github("slidify", "ramnathv")
install_github("slidifyLibraries", "ramnathv")
library(knitr)
path.slides <- "C:/data-sync/coursera/data-science-09-data-products/assignment01/pres-slidify2"
setwd(path.slides)
library(shiny)
library(slidify)
